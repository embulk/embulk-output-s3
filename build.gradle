plugins {
    id "java"
    id "maven-publish"
    id "signing"
    id "org.embulk.embulk-plugins" version "0.4.2"
    id "checkstyle"
}

repositories {
    mavenCentral()
}

group = "org.embulk"
version = "1.7.1-SNAPSHOT"
description = "Stores files on S3."

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    options.encoding = "UTF-8"
}

java {
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    compileOnly "org.embulk:embulk-spi:0.10.31"
    compileOnly "org.embulk:embulk-api:0.10.31"

    compile("com.amazonaws:aws-java-sdk-s3:1.11.1034") {
        // Jackson libraries conflict with embulk-core before v0.10.32.
        // They are once excluded here, and re-added explicitly below.
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"

        // Joda-Time conflicts with embulk-core before v0.10.30.
        // It is once excluded here, and re-added explicitly below.
        exclude group: "joda-time", module: "joda-time"

        // commons-logging api is provided by jcl-over-slf4j below.
        exclude group: "commons-logging", module: "commons-logging"
    }

    compile("com.amazonaws:aws-java-sdk-sts:1.11.466") {
        // They conflict with embulk-core. They are once excluded here,
        // and added explicitly with versions exactly the same with embulk-core:0.10.29.
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
        exclude group: "joda-time", module: "joda-time"

        // commons-logging api is provided by jcl-over-slf4j below.
        exclude group: "commons-logging", module: "commons-logging"
    }

    compile("org.embulk:embulk-util-aws-credentials:0.4.1") {
        // They conflict with embulk-core. They are once excluded here,
        // and added explicitly with versions exactly the same with embulk-core:0.10.29.
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
        exclude group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-jdk8"
        exclude group: "javax.validation", module: "validation-api"
        exclude group: "joda-time", module: "joda-time"
    }

    compile("org.embulk:embulk-util-config:0.3.1") {
        // Jackson libraries conflict with embulk-core before v0.10.32.
        // They are once excluded here, and re-added explicitly below.
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
        exclude group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-jdk8"
        exclude group: "javax.validation", module: "validation-api"
    }

    compile "org.embulk:embulk-util-file:0.1.3"

    // Jackson libraries are once excluded from transitive dependencies of other dependencies, and re-added explicitly here.
    // The versions 2.6.7 are exactly the same with embulk-core's dependency before v0.10.32.
    compile "com.fasterxml.jackson.core:jackson-annotations:2.6.7"
    compile "com.fasterxml.jackson.core:jackson-core:2.6.7"

    // "jackson-databind:2.6.7.1" is a little bit different from "embulk-core:0.10.31"'s dependency ("2.6.7"). But,
    // "embulk-output-s3" had contained "jackson-databind:2.6.7.1", not "2.6.7", for a long time. It has been working.
    // Keeping this "2.6.7.1" here for compatibility with older versions. It has no problems with Embulk v0.10.32+.
    //
    // "aws-java-sdk-s3:1.11.1034" depends on "jackson-databind:2.6.7.4", not "2.6.7.1", but keeping it with "2.6.7.1"
    // until Embulk v0.11 gets widely used.
    compile "com.fasterxml.jackson.core:jackson-databind:2.6.7.1"

    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.6.7"
    compile "javax.validation:validation-api:1.1.0.Final"

    // Joda-Time is once excluded from transitive dependencies of other dependencies, and re-added explicitly here.
    // The version 2.9.2 is exactly the same with embulk-core's dependency before v0.10.30.
    compile "joda-time:joda-time:2.9.2"

    compile("org.slf4j:jcl-over-slf4j:1.7.12") {
        // commons-logging api is provided by jcl-over-slf4j below.
        exclude group: "commons-logging", module: "commons-logging"

        // slf4j-api conflicts with embulk-api. It should be excluded.
        exclude group: "org.slf4j", module: "slf4j-api"
    }

    // Adding dependencies on JAXB explicitly.
    // JAXB 2.2.11 is chosen here because:
    // 1. JDK 8's bundled JAXB is 2.2.8. Better with a closer version while we are on Java 8.
    //    https://javaee.github.io/jaxb-v2/doc/user-guide/ch02.html#a-2-2-8
    // 2. Neither com.sun.xml.bind:jaxb-core:2.2.8 nor com.sun.xml.bind:jaxb-impl:2.2.8 does not exist on Maven Central.
    // 3. 2.2.11 looks to be used by the most Java libraries among JAXB 2.2.
    //    https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
    //    https://mvnrepository.com/artifact/com.sun.xml.bind/jaxb-core
    //    https://mvnrepository.com/artifact/com.sun.xml.bind/jaxb-impl
    // 4. JAXB 2.2.8 and 2.2.11 look to have the same set of classes.
    //    Although their internal implementations are a bit different, class loaders would not be confused.
    compile "javax.xml.bind:jaxb-api:2.2.11"
    compile "com.sun.xml.bind:jaxb-core:2.2.11"
    compile "com.sun.xml.bind:jaxb-impl:2.2.11"

    testCompile "junit:junit:4.13.2"
    testCompile "org.embulk:embulk-core:0.10.31"
    testCompile "org.embulk:embulk-core:0.10.31:tests"
}

embulkPlugin {
    mainClass = "org.embulk.output.s3.S3FileOutputPlugin"
    category = "output"
    type = "s3"
}

javadoc {
    options {
        locale = "en_US"
        encoding = "UTF-8"
    }
}

jar {
    from rootProject.file("LICENSE")
    from rootProject.file("NOTICE")
}

sourcesJar {
    from rootProject.file("LICENSE")
    from rootProject.file("NOTICE")
}

javadocJar {
    from rootProject.file("LICENSE")
    from rootProject.file("NOTICE")
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name

            from components.java  // Must be "components.java". The dependency modification works only for it.
            // javadocJar and sourcesJar are added by java.withJavadocJar() and java.withSourcesJar() above.
            // See: https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPluginExtension.html

            pom {  // https://central.sonatype.org/pages/requirements.html
                packaging "jar"

                name = project.name
                description = project.description
                url = "https://www.embulk.org/"

                licenses {
                    license {
                        // http://central.sonatype.org/pages/requirements.html#license-information
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }

                developers {
                    developer {
                        name = "Manabu Takayama"
                        email = "learn.libra@gmail.com"
                    }
                    developer {
                        name = "Toyama Hiroshi"
                        email = "toyama0919@gmail.com"
                    }
                    developer {
                        name = "Civitaspo"
                        email = "civitaspo@gmail.com"
                    }
                    developer {
                        name = "Shohei Sutoh"
                        email = "ss.aquari@gmail.com"
                    }
                    developer {
                        name = "Hiroyuki Sato"
                        email = "hiroysato@gmail.com"
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/embulk/embulk-output-s3.git"
                    developerConnection = "scm:git:git@github.com:embulk/embulk-output-s3.git"
                    url = "https://github.com/embulk/embulk-output-s3"
                }
            }
        }
    }

    repositories {
        maven {  // publishMavenPublicationToMavenCentralRepository
            name = "mavenCentral"
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://oss.sonatype.org/content/repositories/snapshots"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            }

            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : ""
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : ""
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}

gem {
    authors = [ "Manabu Takayama" ]
    email = [ "learn.libra@gmail.com" ]
    summary = "S3 file output plugin for Embulk"
    homepage = "https://github.com/embulk/embulk-output-s3"
    licenses = [ "Apache-2.0" ]

    from rootProject.file("LICENSE")
    from rootProject.file("NOTICE_GEM")
    rename ("NOTICE_GEM", "NOTICE")
}

gemPush {
    host = "https://rubygems.org"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        outputs.upToDateWhen { false }
    }
}

checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    toolVersion = '6.14.1'
}
checkstyleMain {
    configFile = file("${project.rootDir}/config/checkstyle/default.xml")
    ignoreFailures = true
}
checkstyleTest {
    configFile = file("${project.rootDir}/config/checkstyle/default.xml")
    ignoreFailures = true
}
task checkstyle(type: Checkstyle) {
    classpath = sourceSets.main.output + sourceSets.test.output
    source = sourceSets.main.allJava + sourceSets.test.allJava
}
